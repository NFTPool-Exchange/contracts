{
  "address": "0xF0C686bd8fd842247160A5567eeF2ED9F2F9db8b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperRegistryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "orders",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "contract INFTPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ERC1155ToBuy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ERC20ToSell",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "contract INFTPool",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "ERC1155ToBuy",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ERC20ToSell",
              "type": "uint256"
            }
          ],
          "internalType": "struct LimitOrder.Order",
          "name": "_order",
          "type": "tuple"
        }
      ],
      "name": "placeOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd804a338d6992a41d21f488e9549b326e82b8bd87922e87c16da1a620ad15489",
  "receipt": {
    "to": null,
    "from": "0xb06a64615842CbA9b3Bdb7e6F726F3a5BD20daC2",
    "contractAddress": "0xF0C686bd8fd842247160A5567eeF2ED9F2F9db8b",
    "transactionIndex": 5,
    "gasUsed": "1223645",
    "logsBloom": "0x
    "blockHash": "0x8a23b1bbe3cf6b4058f036c5c579d125997cc81a1ff3d8fd67d89217370d9516",
    "transactionHash": "0xd804a338d6992a41d21f488e9549b326e82b8bd87922e87c16da1a620ad15489",
    "logs": [],
    "blockNumber": 31877798,
    "cumulativeGasUsed": "1816248",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4Cb093f226983713164A62138C3F718A5b595F73"
  ],
  "solcInputHash": "489814fe4ec31f8783f1c1d13618aa2d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperRegistryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract INFTPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ERC1155ToBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ERC20ToSell\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract INFTPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ERC1155ToBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ERC20ToSell\",\"type\":\"uint256\"}],\"internalType\":\"struct LimitOrder.Order\",\"name\":\"_order\",\"type\":\"tuple\"}],\"name\":\"placeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/LimitOrder.sol\":\"LimitOrder\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/KeeperBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5dc972fdf3a524312e68ef6d2e58bcdaf965d08d9415aefa289207350c2bc85a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\",\"keccak256\":\"0xfdb84fea1ee213662ae66b95d4f620be73b7af5ede58be3d330b222b9b566d95\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x249bc2a6d919da5f5145950664134cfcf2f66874bda801fd3b8fb861783da079\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0x7c0ea2d284bad1aa002165ba4c5eac30070be8e56b19dba1ac7c8f2c8bd4832c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2ccdc162657b677334eb08a60bb50a0dd74b22eff7150abb06487f58dbebd5e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfb1161632a10d0bd366c80db583246fa490183b45ec4f59acb43b97d1a7437b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/interfaces/INFTPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface INFTPool is IERC20 {\\n    function ERC20Token() external view returns (IERC20);\\n\\n    function ERC1155Token() external view returns (IERC1155);\\n\\n    function ERC1155ID() external view returns (uint256);\\n\\n    function FEE_MULTIPLIER() external view returns (uint256);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n\\n    function nonces(address) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function addLiquidity(\\n        uint256 _ERC1155Amount,\\n        uint256 _maxERC20Amount,\\n        uint256 _deadline\\n    ) external returns (uint256 ERC20Amount, uint256 lpMinted);\\n\\n    function removeLiquidity(\\n        uint256 _lpAmount,\\n        uint256 _minERC1155,\\n        uint256 _minERC20,\\n        uint256 _deadline\\n    ) external returns (uint256 ERC1155Amount, uint256 ERC20Amount);\\n\\n    function swapExactERC1155ToERC20(\\n        uint256 _ERC1155Amount,\\n        uint256 _minERC20,\\n        uint256 _deadline\\n    ) external returns (uint256 ERC20Bought);\\n\\n    function swapERC20toERC1155Exact(\\n        uint256 _maxERC20,\\n        uint256 _ERC1155Amount,\\n        uint256 _deadline\\n    ) external returns (uint256 ERC20Sold);\\n\\n    function getAddLiquidityAmount(uint256 _ERC1155Amount)\\n        external\\n        view\\n        returns (uint256 ERC20Amount);\\n\\n    function getRemoveLiquidityAmounts(uint256 _lpAmount)\\n        external\\n        view\\n        returns (uint256 ERC1155Amount, uint256 ERC20Amount);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (uint256 ERC1155Reserve, uint256 ERC20Reserve);\\n\\n    /// fee deducted in ERC20\\n    function getPriceERC1155toERC20(uint256 _ERC1155Amount)\\n        external\\n        view\\n        returns (uint256 ERC20Bought);\\n\\n    /// fee deducted in ERC20\\n    function getPriceERC20toERC1155Exact(uint256 _ERC1155Amount)\\n        external\\n        view\\n        returns (uint256 ERC20Required);\\n\\n    /// fee deducted in OutputToken\\n    function calculateOutputAmount_OutputFee(\\n        uint256 inputAmount,\\n        uint256 inputReserve,\\n        uint256 outputReserve\\n    ) external pure returns (uint256);\\n\\n    /// fee deducted in InputToken\\n    function calculateInputAmount_InputFee(\\n        uint256 outputAmount,\\n        uint256 inputReserve,\\n        uint256 outputReserve\\n    ) external pure returns (uint256 price);\\n}\\n\",\"keccak256\":\"0x631e98100c54b941f11f8ea62640a3849c139af0cc95509f5bd8a07bb5a6f237\",\"license\":\"GPL-2.0\"},\"contracts/periphery/LimitOrder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.0;\\n\\nimport {KeeperCompatibleInterface} from \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport {INFTPool} from \\\"../interfaces/INFTPool.sol\\\";\\n\\ncontract LimitOrder is KeeperCompatibleInterface, ERC1155Holder {\\n    using SafeERC20 for IERC20;\\n\\n    struct Order {\\n        address user;\\n        INFTPool pool;\\n        uint256 ERC1155ToBuy;\\n        uint256 ERC20ToSell;\\n    }\\n\\n    address keeperRegistryAddress;\\n\\n    Order[] public orders;\\n\\n    constructor(address _keeperRegistryAddress) {\\n        keeperRegistryAddress = _keeperRegistryAddress;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeperRegistryAddress, \\\"!Keeper\\\");\\n        _;\\n    }\\n\\n    function placeOrder(Order calldata _order) external {\\n        require(address(_order.pool) != address(0), \\\"Invalid Pool\\\");\\n        require(\\n            _order.ERC1155ToBuy != 0 && _order.ERC20ToSell != 0,\\n            \\\"Invalid Amounts\\\"\\n        );\\n\\n        IERC20 erc20 = _order.pool.ERC20Token();\\n        erc20.safeTransferFrom(msg.sender, address(this), _order.ERC20ToSell);\\n\\n        orders.push(_order);\\n    }\\n\\n    function checkUpkeep(\\n        bytes calldata /* checkData */\\n    )\\n        external\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory performData)\\n    {\\n        uint256 ordersToExecCount;\\n        bool[] memory toExec = new bool[](orders.length);\\n\\n        for (uint256 i = 0; i < orders.length; i++) {\\n            uint256 erc20RqdForSwap = orders[i]\\n                .pool\\n                .getPriceERC20toERC1155Exact(orders[i].ERC1155ToBuy);\\n\\n            if (orders[i].ERC20ToSell >= erc20RqdForSwap) {\\n                toExec[i] = true;\\n                ordersToExecCount++;\\n            }\\n        }\\n\\n        if (ordersToExecCount > 0) {\\n            upkeepNeeded = true;\\n\\n            uint256[] memory ordersToExec = new uint256[](ordersToExecCount);\\n            uint256 j;\\n            for (uint256 i = 0; i < orders.length; i++) {\\n                if (toExec[i]) {\\n                    ordersToExec[j++] = i;\\n                }\\n            }\\n\\n            performData = abi.encode(ordersToExec);\\n        }\\n    }\\n\\n    function performUpkeep(bytes calldata performData)\\n        external\\n        override\\n        onlyKeeper\\n    {\\n        uint256[] memory ordersToExec;\\n        (ordersToExec) = abi.decode(performData, (uint256[]));\\n\\n        for (uint256 i = 0; i < ordersToExec.length; i++) {\\n            _executeOrder(ordersToExec[i]);\\n        }\\n    }\\n\\n    function _executeOrder(uint256 _orderIndex) internal {\\n        Order memory _order = orders[_orderIndex];\\n\\n        IERC20 erc20 = _order.pool.ERC20Token();\\n        erc20.safeApprove(address(_order.pool), _order.ERC20ToSell);\\n\\n        // swap on NFTPool\\n        uint256 erc20Sold = _order.pool.swapERC20toERC1155Exact(\\n            _order.ERC20ToSell,\\n            _order.ERC1155ToBuy,\\n            block.timestamp\\n        );\\n        // send erc1155 to user\\n        IERC1155 erc1155 = _order.pool.ERC1155Token();\\n        erc1155.safeTransferFrom(\\n            address(this),\\n            _order.user,\\n            _order.pool.ERC1155ID(),\\n            _order.ERC1155ToBuy,\\n            \\\"\\\"\\n        );\\n\\n        // refund extra erc20\\n        if (erc20Sold < _order.ERC20ToSell) {\\n            erc20.safeTransfer(_order.user, _order.ERC20ToSell - erc20Sold);\\n        }\\n\\n        /// remove order from array\\n        // replace current executed order with last order in array\\n        orders[_orderIndex] = orders[orders.length];\\n        // remove last order from array\\n        orders.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x7c1c22c564f59213aae32cf85c5808fd4f64611de5a4a22cbca715395a7ca600\",\"license\":\"GPL-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161154f38038061154f83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6114bc806100936000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063714843d51161005b578063714843d5146100e0578063a85c38ef146100f3578063bc197c8114610131578063f23a6e611461016957600080fd5b806301ffc9a7146100825780634585e33b146100aa5780636e04ff0d146100bf575b600080fd5b610095610090366004611151565b610188565b60405190151581526020015b60405180910390f35b6100bd6100b836600461117b565b6101bf565b005b6100d26100cd36600461117b565b61025e565b6040516100a19291906112fd565b6100bd6100ee366004611227565b6104e7565b61010661010136600461123f565b610670565b604080516001600160a01b0395861681529490931660208501529183015260608201526080016100a1565b61015061013f366004610fdb565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016100a1565b610150610177366004611089565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b14806101b957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000546001600160a01b031633146102085760405162461bcd60e51b815260206004820152600760248201526610a5b2b2b832b960c91b60448201526064015b60405180910390fd5b6060610216828401846110f2565b905060005b815181101561025857610246828281518110610239576102396113e6565b60200260200101516106b6565b806102508161139f565b91505061021b565b50505050565b6000606060008060018054905067ffffffffffffffff811115610283576102836113fc565b6040519080825280602002602001820160405280156102ac578160200160208202803683370190505b50905060005b6001548110156103fc576000600182815481106102d1576102d16113e6565b60009182526020909120600160049092020181015481546001600160a01b039091169163b91686dd918590811061030a5761030a6113e6565b9060005260206000209060040201600201546040518263ffffffff1660e01b815260040161033a91815260200190565b60206040518083038186803b15801561035257600080fd5b505afa158015610366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038a9190611258565b905080600183815481106103a0576103a06113e6565b906000526020600020906004020160030154106103e95760018383815181106103cb576103cb6113e6565b91151560209283029190910190910152836103e58161139f565b9450505b50806103f48161139f565b9150506102b2565b5081156104de576001935060008267ffffffffffffffff811115610422576104226113fc565b60405190808252806020026020018201604052801561044b578160200160208202803683370190505b5090506000805b6001548110156104b85783818151811061046e5761046e6113e6565b6020026020010151156104a6578083836104878161139f565b945081518110610499576104996113e6565b6020026020010181815250505b806104b08161139f565b915050610452565b50816040516020016104ca91906112b9565b604051602081830303815290604052945050505b50509250929050565b60006104f9604083016020840161120a565b6001600160a01b0316141561053f5760405162461bcd60e51b815260206004820152600c60248201526b125b9d985b1a5908141bdbdb60a21b60448201526064016101ff565b6040810135158015906105555750606081013515155b6105935760405162461bcd60e51b815260206004820152600f60248201526e496e76616c696420416d6f756e747360881b60448201526064016101ff565b60006105a5604083016020840161120a565b6001600160a01b0316637a80760e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105dd57600080fd5b505afa1580156105f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061591906111ed565b90506106306001600160a01b03821633306060860135610ad5565b60018054808201825560009190915282906004027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6016102588282611412565b6001818154811061068057600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b0392831694509116919084565b6000600182815481106106cb576106cb6113e6565b6000918252602080832060408051608081018252600494850290920180546001600160a01b03908116845260018201541683850181905260028201548484015260039091015460608401528151633d403b0760e11b8152915192965093637a80760e93828201939092909190829003018186803b15801561074b57600080fd5b505afa15801561075f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078391906111ed565b90506107ab82602001518360600151836001600160a01b0316610b409092919063ffffffff16565b602082015160608301516040808501519051634a370ba560e01b8152600481019290925260248201524260448201526000916001600160a01b031690634a370ba590606401602060405180830381600087803b15801561080a57600080fd5b505af115801561081e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108429190611258565b9050600083602001516001600160a01b03166373ee45086040518163ffffffff1660e01b815260040160206040518083038186803b15801561088357600080fd5b505afa158015610897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bb91906111ed565b9050806001600160a01b031663f242432a30866000015187602001516001600160a01b031663ae7eaa046040518163ffffffff1660e01b815260040160206040518083038186803b15801561090f57600080fd5b505afa158015610923573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109479190611258565b6040808a015190516001600160e01b031960e087901b1681526001600160a01b0394851660048201529390921660248401526044830152606482015260a06084820152600060a482015260c401600060405180830381600087803b1580156109ae57600080fd5b505af11580156109c2573d6000803e3d6000fd5b5050505083606001518210156109fb576109fb84600001518386606001516109ea919061135c565b6001600160a01b0386169190610c69565b60018054610a076113e6565b906000526020600020906004020160018681548110610a2857610a286113e6565b60009182526020909120825460049092020180546001600160a01b03199081166001600160a01b039384161782556001808501548184018054909316941693909317905560028084015490820155600392830154920191909155805480610a9157610a916113d0565b60008281526020812060046000199093019283020180546001600160a01b031990811682556001820180549091169055600281018290556003015590555050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526102589085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610c99565b801580610bc95750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015610b8f57600080fd5b505afa158015610ba3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc79190611258565b155b610c345760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016101ff565b6040516001600160a01b038316602482015260448101829052610c6490849063095ea7b360e01b90606401610b09565b505050565b6040516001600160a01b038316602482015260448101829052610c6490849063a9059cbb60e01b90606401610b09565b6000610cee826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d6b9092919063ffffffff16565b805190915015610c645780806020019051810190610d0c919061112f565b610c645760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101ff565b6060610d7a8484600085610d84565b90505b9392505050565b606082471015610de55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101ff565b843b610e335760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101ff565b600080866001600160a01b03168587604051610e4f919061129d565b60006040518083038185875af1925050503d8060008114610e8c576040519150601f19603f3d011682016040523d82523d6000602084013e610e91565b606091505b5091509150610ea1828286610eac565b979650505050505050565b60608315610ebb575081610d7d565b825115610ecb5782518084602001fd5b8160405162461bcd60e51b81526004016101ff9190611318565b600082601f830112610ef657600080fd5b8135602067ffffffffffffffff821115610f1257610f126113fc565b8160051b610f2182820161132b565b838152828101908684018388018501891015610f3c57600080fd5b600093505b85841015610f5f578035835260019390930192918401918401610f41565b50979650505050505050565b600082601f830112610f7c57600080fd5b813567ffffffffffffffff811115610f9657610f966113fc565b610fa9601f8201601f191660200161132b565b818152846020838601011115610fbe57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215610ff357600080fd5b8535610ffe8161146e565b9450602086013561100e8161146e565b9350604086013567ffffffffffffffff8082111561102b57600080fd5b61103789838a01610ee5565b9450606088013591508082111561104d57600080fd5b61105989838a01610ee5565b9350608088013591508082111561106f57600080fd5b5061107c88828901610f6b565b9150509295509295909350565b600080600080600060a086880312156110a157600080fd5b85356110ac8161146e565b945060208601356110bc8161146e565b93506040860135925060608601359150608086013567ffffffffffffffff8111156110e657600080fd5b61107c88828901610f6b565b60006020828403121561110457600080fd5b813567ffffffffffffffff81111561111b57600080fd5b61112784828501610ee5565b949350505050565b60006020828403121561114157600080fd5b81518015158114610d7d57600080fd5b60006020828403121561116357600080fd5b81356001600160e01b031981168114610d7d57600080fd5b6000806020838503121561118e57600080fd5b823567ffffffffffffffff808211156111a657600080fd5b818501915085601f8301126111ba57600080fd5b8135818111156111c957600080fd5b8660208285010111156111db57600080fd5b60209290920196919550909350505050565b6000602082840312156111ff57600080fd5b8151610d7d8161146e565b60006020828403121561121c57600080fd5b8135610d7d8161146e565b60006080828403121561123957600080fd5b50919050565b60006020828403121561125157600080fd5b5035919050565b60006020828403121561126a57600080fd5b5051919050565b60008151808452611289816020860160208601611373565b601f01601f19169290920160200192915050565b600082516112af818460208701611373565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156112f1578351835292840192918401916001016112d5565b50909695505050505050565b8215158152604060208201526000610d7a6040830184611271565b602081526000610d7d6020830184611271565b604051601f8201601f1916810167ffffffffffffffff81118282101715611354576113546113fc565b604052919050565b60008282101561136e5761136e6113ba565b500390565b60005b8381101561138e578181015183820152602001611376565b838111156102585750506000910152565b60006000198214156113b3576113b36113ba565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b813561141d8161146e565b81546001600160a01b03199081166001600160a01b03928316178355600183019190602085013561144d8161146e565b83549216911617905560408201356002820155606090910135600390910155565b6001600160a01b038116811461148357600080fd5b5056fea26469706673582212201465ae7ff0cba53941251d8f8263ee4df1a6d8de9170228707bbfbbc9fb9dce664736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063714843d51161005b578063714843d5146100e0578063a85c38ef146100f3578063bc197c8114610131578063f23a6e611461016957600080fd5b806301ffc9a7146100825780634585e33b146100aa5780636e04ff0d146100bf575b600080fd5b610095610090366004611151565b610188565b60405190151581526020015b60405180910390f35b6100bd6100b836600461117b565b6101bf565b005b6100d26100cd36600461117b565b61025e565b6040516100a19291906112fd565b6100bd6100ee366004611227565b6104e7565b61010661010136600461123f565b610670565b604080516001600160a01b0395861681529490931660208501529183015260608201526080016100a1565b61015061013f366004610fdb565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016100a1565b610150610177366004611089565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b14806101b957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000546001600160a01b031633146102085760405162461bcd60e51b815260206004820152600760248201526610a5b2b2b832b960c91b60448201526064015b60405180910390fd5b6060610216828401846110f2565b905060005b815181101561025857610246828281518110610239576102396113e6565b60200260200101516106b6565b806102508161139f565b91505061021b565b50505050565b6000606060008060018054905067ffffffffffffffff811115610283576102836113fc565b6040519080825280602002602001820160405280156102ac578160200160208202803683370190505b50905060005b6001548110156103fc576000600182815481106102d1576102d16113e6565b60009182526020909120600160049092020181015481546001600160a01b039091169163b91686dd918590811061030a5761030a6113e6565b9060005260206000209060040201600201546040518263ffffffff1660e01b815260040161033a91815260200190565b60206040518083038186803b15801561035257600080fd5b505afa158015610366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038a9190611258565b905080600183815481106103a0576103a06113e6565b906000526020600020906004020160030154106103e95760018383815181106103cb576103cb6113e6565b91151560209283029190910190910152836103e58161139f565b9450505b50806103f48161139f565b9150506102b2565b5081156104de576001935060008267ffffffffffffffff811115610422576104226113fc565b60405190808252806020026020018201604052801561044b578160200160208202803683370190505b5090506000805b6001548110156104b85783818151811061046e5761046e6113e6565b6020026020010151156104a6578083836104878161139f565b945081518110610499576104996113e6565b6020026020010181815250505b806104b08161139f565b915050610452565b50816040516020016104ca91906112b9565b604051602081830303815290604052945050505b50509250929050565b60006104f9604083016020840161120a565b6001600160a01b0316141561053f5760405162461bcd60e51b815260206004820152600c60248201526b125b9d985b1a5908141bdbdb60a21b60448201526064016101ff565b6040810135158015906105555750606081013515155b6105935760405162461bcd60e51b815260206004820152600f60248201526e496e76616c696420416d6f756e747360881b60448201526064016101ff565b60006105a5604083016020840161120a565b6001600160a01b0316637a80760e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105dd57600080fd5b505afa1580156105f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061591906111ed565b90506106306001600160a01b03821633306060860135610ad5565b60018054808201825560009190915282906004027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6016102588282611412565b6001818154811061068057600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b0392831694509116919084565b6000600182815481106106cb576106cb6113e6565b6000918252602080832060408051608081018252600494850290920180546001600160a01b03908116845260018201541683850181905260028201548484015260039091015460608401528151633d403b0760e11b8152915192965093637a80760e93828201939092909190829003018186803b15801561074b57600080fd5b505afa15801561075f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078391906111ed565b90506107ab82602001518360600151836001600160a01b0316610b409092919063ffffffff16565b602082015160608301516040808501519051634a370ba560e01b8152600481019290925260248201524260448201526000916001600160a01b031690634a370ba590606401602060405180830381600087803b15801561080a57600080fd5b505af115801561081e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108429190611258565b9050600083602001516001600160a01b03166373ee45086040518163ffffffff1660e01b815260040160206040518083038186803b15801561088357600080fd5b505afa158015610897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bb91906111ed565b9050806001600160a01b031663f242432a30866000015187602001516001600160a01b031663ae7eaa046040518163ffffffff1660e01b815260040160206040518083038186803b15801561090f57600080fd5b505afa158015610923573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109479190611258565b6040808a015190516001600160e01b031960e087901b1681526001600160a01b0394851660048201529390921660248401526044830152606482015260a06084820152600060a482015260c401600060405180830381600087803b1580156109ae57600080fd5b505af11580156109c2573d6000803e3d6000fd5b5050505083606001518210156109fb576109fb84600001518386606001516109ea919061135c565b6001600160a01b0386169190610c69565b60018054610a076113e6565b906000526020600020906004020160018681548110610a2857610a286113e6565b60009182526020909120825460049092020180546001600160a01b03199081166001600160a01b039384161782556001808501548184018054909316941693909317905560028084015490820155600392830154920191909155805480610a9157610a916113d0565b60008281526020812060046000199093019283020180546001600160a01b031990811682556001820180549091169055600281018290556003015590555050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526102589085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610c99565b801580610bc95750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015610b8f57600080fd5b505afa158015610ba3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc79190611258565b155b610c345760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016101ff565b6040516001600160a01b038316602482015260448101829052610c6490849063095ea7b360e01b90606401610b09565b505050565b6040516001600160a01b038316602482015260448101829052610c6490849063a9059cbb60e01b90606401610b09565b6000610cee826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d6b9092919063ffffffff16565b805190915015610c645780806020019051810190610d0c919061112f565b610c645760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101ff565b6060610d7a8484600085610d84565b90505b9392505050565b606082471015610de55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101ff565b843b610e335760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101ff565b600080866001600160a01b03168587604051610e4f919061129d565b60006040518083038185875af1925050503d8060008114610e8c576040519150601f19603f3d011682016040523d82523d6000602084013e610e91565b606091505b5091509150610ea1828286610eac565b979650505050505050565b60608315610ebb575081610d7d565b825115610ecb5782518084602001fd5b8160405162461bcd60e51b81526004016101ff9190611318565b600082601f830112610ef657600080fd5b8135602067ffffffffffffffff821115610f1257610f126113fc565b8160051b610f2182820161132b565b838152828101908684018388018501891015610f3c57600080fd5b600093505b85841015610f5f578035835260019390930192918401918401610f41565b50979650505050505050565b600082601f830112610f7c57600080fd5b813567ffffffffffffffff811115610f9657610f966113fc565b610fa9601f8201601f191660200161132b565b818152846020838601011115610fbe57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215610ff357600080fd5b8535610ffe8161146e565b9450602086013561100e8161146e565b9350604086013567ffffffffffffffff8082111561102b57600080fd5b61103789838a01610ee5565b9450606088013591508082111561104d57600080fd5b61105989838a01610ee5565b9350608088013591508082111561106f57600080fd5b5061107c88828901610f6b565b9150509295509295909350565b600080600080600060a086880312156110a157600080fd5b85356110ac8161146e565b945060208601356110bc8161146e565b93506040860135925060608601359150608086013567ffffffffffffffff8111156110e657600080fd5b61107c88828901610f6b565b60006020828403121561110457600080fd5b813567ffffffffffffffff81111561111b57600080fd5b61112784828501610ee5565b949350505050565b60006020828403121561114157600080fd5b81518015158114610d7d57600080fd5b60006020828403121561116357600080fd5b81356001600160e01b031981168114610d7d57600080fd5b6000806020838503121561118e57600080fd5b823567ffffffffffffffff808211156111a657600080fd5b818501915085601f8301126111ba57600080fd5b8135818111156111c957600080fd5b8660208285010111156111db57600080fd5b60209290920196919550909350505050565b6000602082840312156111ff57600080fd5b8151610d7d8161146e565b60006020828403121561121c57600080fd5b8135610d7d8161146e565b60006080828403121561123957600080fd5b50919050565b60006020828403121561125157600080fd5b5035919050565b60006020828403121561126a57600080fd5b5051919050565b60008151808452611289816020860160208601611373565b601f01601f19169290920160200192915050565b600082516112af818460208701611373565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156112f1578351835292840192918401916001016112d5565b50909695505050505050565b8215158152604060208201526000610d7a6040830184611271565b602081526000610d7d6020830184611271565b604051601f8201601f1916810167ffffffffffffffff81118282101715611354576113546113fc565b604052919050565b60008282101561136e5761136e6113ba565b500390565b60005b8381101561138e578181015183820152602001611376565b838111156102585750506000910152565b60006000198214156113b3576113b36113ba565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b813561141d8161146e565b81546001600160a01b03199081166001600160a01b03928316178355600183019190602085013561144d8161146e565b83549216911617905560408201356002820155606090910135600390910155565b6001600160a01b038116811461148357600080fd5b5056fea26469706673582212201465ae7ff0cba53941251d8f8263ee4df1a6d8de9170228707bbfbbc9fb9dce664736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "performUpkeep(bytes)": {
        "details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
        "params": {
          "performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "performUpkeep(bytes)": {
        "notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4187,
        "contract": "contracts/periphery/LimitOrder.sol:LimitOrder",
        "label": "keeperRegistryAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4191,
        "contract": "contracts/periphery/LimitOrder.sol:LimitOrder",
        "label": "orders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Order)4185_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Order)4185_storage)dyn_storage": {
        "base": "t_struct(Order)4185_storage",
        "encoding": "dynamic_array",
        "label": "struct LimitOrder.Order[]",
        "numberOfBytes": "32"
      },
      "t_contract(INFTPool)4157": {
        "encoding": "inplace",
        "label": "contract INFTPool",
        "numberOfBytes": "20"
      },
      "t_struct(Order)4185_storage": {
        "encoding": "inplace",
        "label": "struct LimitOrder.Order",
        "members": [
          {
            "astId": 4177,
            "contract": "contracts/periphery/LimitOrder.sol:LimitOrder",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4180,
            "contract": "contracts/periphery/LimitOrder.sol:LimitOrder",
            "label": "pool",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(INFTPool)4157"
          },
          {
            "astId": 4182,
            "contract": "contracts/periphery/LimitOrder.sol:LimitOrder",
            "label": "ERC1155ToBuy",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4184,
            "contract": "contracts/periphery/LimitOrder.sol:LimitOrder",
            "label": "ERC20ToSell",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}