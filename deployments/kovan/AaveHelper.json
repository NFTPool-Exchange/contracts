{
  "address": "0x15df3a1E8FEAE4a20C8F508D9B8af7c2E631566F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aDAI",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DAI",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aDAI",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveLendingPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract INFTPool",
          "name": "nftPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ERC1155Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxERC20Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityWithDAI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ERC20Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpMinted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6c6599cef9909bae9d312fa5360eb66052ed9c4758ea52a0387b0b976023368f",
  "receipt": {
    "to": null,
    "from": "0xA09aB1aBeCb91CaC38c3240912D2A1b31e22F147",
    "contractAddress": "0x15df3a1E8FEAE4a20C8F508D9B8af7c2E631566F",
    "transactionIndex": 2,
    "gasUsed": "867912",
    "logsBloom": "0x
    "blockHash": "0x65f7c435cb990c652b56d0116f8374e32a95533a9c694f0a811f83ba5ee7f08d",
    "transactionHash": "0x6c6599cef9909bae9d312fa5360eb66052ed9c4758ea52a0387b0b976023368f",
    "logs": [],
    "blockNumber": 26337198,
    "cumulativeGasUsed": "988934",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdCf0aF9e59C002FA3AA091a46196b37530FD48a8"
  ],
  "solcInputHash": "523f54fb56adfe22dccb5aeae18c0811",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aDAI\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aDAI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveLendingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INFTPool\",\"name\":\"nftPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ERC1155Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxERC20Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityWithDAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ERC20Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AaveHelper.sol\":\"AaveHelper\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x249bc2a6d919da5f5145950664134cfcf2f66874bda801fd3b8fb861783da079\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0x7c0ea2d284bad1aa002165ba4c5eac30070be8e56b19dba1ac7c8f2c8bd4832c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2ccdc162657b677334eb08a60bb50a0dd74b22eff7150abb06487f58dbebd5e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfb1161632a10d0bd366c80db583246fa490183b45ec4f59acb43b97d1a7437b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/AaveHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\nimport {INFTPool} from \\\"./interfaces/INFTPool.sol\\\";\\r\\n\\r\\ninterface IAToken {\\r\\n    function POOL() external returns (address);\\r\\n\\r\\n    function UNDERLYING_ASSET_ADDRESS() external returns (address);\\r\\n}\\r\\n\\r\\ninterface IAaveLendingPool {\\r\\n    function deposit(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract AaveHelper is ERC1155Holder {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // KOVAN\\r\\n    IERC20 public constant DAI =\\r\\n        IERC20(0xFf795577d9AC8bD7D90Ee22b6C1703490b6512FD);\\r\\n    address public aaveLendingPool;\\r\\n    IERC20 public immutable aDAI;\\r\\n\\r\\n    constructor(address _aDAI) {\\r\\n        aDAI = IERC20(_aDAI);\\r\\n        aaveLendingPool = IAToken(_aDAI).POOL();\\r\\n    }\\r\\n\\r\\n    function addLiquidityWithDAI(\\r\\n        INFTPool nftPool,\\r\\n        uint256 _ERC1155Amount,\\r\\n        uint256 _maxERC20Amount,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 ERC20Amount, uint256 lpMinted) {\\r\\n        // get DAI from user\\r\\n        DAI.safeTransferFrom(msg.sender, address(this), _maxERC20Amount);\\r\\n        // get ERC1155 from user\\r\\n        IERC1155 erc1155Token = nftPool.ERC1155Token();\\r\\n        uint256 erc1155ID = nftPool.ERC1155ID();\\r\\n        erc1155Token.safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            erc1155ID,\\r\\n            _ERC1155Amount,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n\\r\\n        // convert DAI to aDAI\\r\\n        DAI.safeApprove(aaveLendingPool, 0);\\r\\n        DAI.safeApprove(aaveLendingPool, _maxERC20Amount);\\r\\n\\r\\n        IAaveLendingPool(aaveLendingPool).deposit(\\r\\n            address(DAI),\\r\\n            _maxERC20Amount,\\r\\n            address(this),\\r\\n            0\\r\\n        );\\r\\n\\r\\n        // addLiquidity to Pool\\r\\n        aDAI.safeApprove(address(nftPool), 0);\\r\\n        aDAI.safeApprove(address(nftPool), _maxERC20Amount);\\r\\n        erc1155Token.setApprovalForAll(address(nftPool), true);\\r\\n\\r\\n        (ERC20Amount, lpMinted) = nftPool.addLiquidity(\\r\\n            _ERC1155Amount,\\r\\n            _maxERC20Amount,\\r\\n            _deadline\\r\\n        );\\r\\n\\r\\n        // transfer residue back to user\\r\\n        uint256 residue = _maxERC20Amount - ERC20Amount;\\r\\n        if (residue > 0) {\\r\\n            aDAI.safeTransfer(msg.sender, residue);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2321377ecb84bd461fecf505437436b1b6387a81ed58b2ec00fe128a1199451e\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/INFTPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\n\\r\\ninterface INFTPool is IERC20 {\\r\\n    function ERC20Token() external view returns (IERC20);\\r\\n\\r\\n    function ERC1155Token() external view returns (IERC1155);\\r\\n\\r\\n    function ERC1155ID() external view returns (uint256);\\r\\n\\r\\n    function FEE_MULTIPLIER() external view returns (uint256);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\r\\n\\r\\n    function nonces(address) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function addLiquidity(\\r\\n        uint256 _ERC1155Amount,\\r\\n        uint256 _maxERC20Amount,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 ERC20Amount, uint256 lpMinted);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        uint256 _lpAmount,\\r\\n        uint256 _minERC1155,\\r\\n        uint256 _minERC20,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 ERC1155Amount, uint256 ERC20Amount);\\r\\n\\r\\n    function SwapExactERC1155ToERC20(\\r\\n        uint256 _ERC1155Amount,\\r\\n        uint256 _minERC20,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 ERC20Bought);\\r\\n\\r\\n    function SwapERC20toERC1155Exact(\\r\\n        uint256 _maxERC20,\\r\\n        uint256 _ERC1155Amount,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 ERC20Sold);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 ERC1155Reserve, uint256 ERC20Reserve);\\r\\n\\r\\n    /// fee deducted in ERC20\\r\\n    function getPriceERC1155toERC20(uint256 _ERC1155Amount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 ERC20Bought);\\r\\n\\r\\n    /// fee deducted in ERC20\\r\\n    function getPriceERC20toERC1155Exact(uint256 _ERC1155Amount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 ERC20Required);\\r\\n\\r\\n    /// fee deducted in OutputToken\\r\\n    function calculateOutputAmount_OutputFee(\\r\\n        uint256 inputAmount,\\r\\n        uint256 inputReserve,\\r\\n        uint256 outputReserve\\r\\n    ) external pure returns (uint256);\\r\\n\\r\\n    /// fee deducted in InputToken\\r\\n    function calculateInputAmount_InputFee(\\r\\n        uint256 outputAmount,\\r\\n        uint256 inputReserve,\\r\\n        uint256 outputReserve\\r\\n    ) external pure returns (uint256 price);\\r\\n}\\r\\n\",\"keccak256\":\"0xa491f2be5d9524d6b683b019a322f808009dd5df9cbb7e6fa8983dd64213d606\",\"license\":\"GPL-2.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610f66380380610f6683398101604081905261002f916100e5565b806001600160a01b03166080816001600160a01b031660601b81525050806001600160a01b0316637535d2466040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561008757600080fd5b505af115801561009b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100bf91906100e5565b600080546001600160a01b0319166001600160a01b039290921691909117905550610115565b6000602082840312156100f757600080fd5b81516001600160a01b038116811461010e57600080fd5b9392505050565b60805160601c610e1f6101476000396000818160af015281816104410152818161047801526105ae0152610e1f6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063bc197c811161005b578063bc197c8114610111578063e0bab4c414610149578063e9d337b814610164578063f23a6e611461017757600080fd5b806301ffc9a7146100825780631a38a4fb146100aa5780631c4991ae146100e9575b600080fd5b610095610090366004610c2b565b610196565b60405190151581526020015b60405180910390f35b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100a1565b6100fc6100f7366004610c72565b6101cd565b604080519283526020830191909152016100a1565b61013061011f366004610af2565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016100a1565b6100d173ff795577d9ac8bd7d90ee22b6c1703490b6512fd81565b6000546100d1906001600160a01b031681565b610130610185366004610ba0565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b14806101c757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000806101f073ff795577d9ac8bd7d90ee22b6c1703490b6512fd3330876105e1565b6000866001600160a01b03166373ee45086040518163ffffffff1660e01b815260040160206040518083038186803b15801561022b57600080fd5b505afa15801561023f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102639190610c55565b90506000876001600160a01b031663ae7eaa046040518163ffffffff1660e01b815260040160206040518083038186803b1580156102a057600080fd5b505afa1580156102b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d89190610cad565b604051637921219560e11b8152336004820152306024820152604481018290526064810189905260a06084820152600060a48201529091506001600160a01b0383169063f242432a9060c401600060405180830381600087803b15801561033e57600080fd5b505af1158015610352573d6000803e3d6000fd5b505060008054610383935073ff795577d9ac8bd7d90ee22b6c1703490b6512fd92506001600160a01b031690610652565b6000546103af9073ff795577d9ac8bd7d90ee22b6c1703490b6512fd906001600160a01b031688610652565b6000805460405163e8eda9df60e01b815273ff795577d9ac8bd7d90ee22b6c1703490b6512fd60048201526024810189905230604482015260648101929092526001600160a01b03169063e8eda9df90608401600060405180830381600087803b15801561041c57600080fd5b505af1158015610430573d6000803e3d6000fd5b5061046b9250506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169050896000610652565b61049f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168988610652565b60405163a22cb46560e01b81526001600160a01b0389811660048301526001602483015283169063a22cb46590604401600060405180830381600087803b1580156104e957600080fd5b505af11580156104fd573d6000803e3d6000fd5b505060405163422f104360e01b8152600481018a905260248101899052604481018890526001600160a01b038b16925063422f104391506064016040805180830381600087803b15801561055057600080fd5b505af1158015610564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105889190610cc6565b909450925060006105998588610d6a565b905080156105d5576105d56001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383610780565b50505094509492505050565b6040516001600160a01b038085166024830152831660448201526064810182905261064c9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526107b0565b50505050565b8015806106db5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156106a157600080fd5b505afa1580156106b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d99190610cad565b155b61074b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084015b60405180910390fd5b6040516001600160a01b03831660248201526044810182905261077b90849063095ea7b360e01b90606401610615565b505050565b6040516001600160a01b03831660248201526044810182905261077b90849063a9059cbb60e01b90606401610615565b6000610805826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108829092919063ffffffff16565b80519091501561077b57808060200190518101906108239190610c09565b61077b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610742565b6060610891848460008561089b565b90505b9392505050565b6060824710156108fc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610742565b843b61094a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610742565b600080866001600160a01b031685876040516109669190610cea565b60006040518083038185875af1925050503d80600081146109a3576040519150601f19603f3d011682016040523d82523d6000602084013e6109a8565b606091505b50915091506109b88282866109c3565b979650505050505050565b606083156109d2575081610894565b8251156109e25782518084602001fd5b8160405162461bcd60e51b81526004016107429190610d06565b600082601f830112610a0d57600080fd5b8135602067ffffffffffffffff821115610a2957610a29610dbb565b8160051b610a38828201610d39565b838152828101908684018388018501891015610a5357600080fd5b600093505b85841015610a76578035835260019390930192918401918401610a58565b50979650505050505050565b600082601f830112610a9357600080fd5b813567ffffffffffffffff811115610aad57610aad610dbb565b610ac0601f8201601f1916602001610d39565b818152846020838601011115610ad557600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215610b0a57600080fd5b8535610b1581610dd1565b94506020860135610b2581610dd1565b9350604086013567ffffffffffffffff80821115610b4257600080fd5b610b4e89838a016109fc565b94506060880135915080821115610b6457600080fd5b610b7089838a016109fc565b93506080880135915080821115610b8657600080fd5b50610b9388828901610a82565b9150509295509295909350565b600080600080600060a08688031215610bb857600080fd5b8535610bc381610dd1565b94506020860135610bd381610dd1565b93506040860135925060608601359150608086013567ffffffffffffffff811115610bfd57600080fd5b610b9388828901610a82565b600060208284031215610c1b57600080fd5b8151801515811461089457600080fd5b600060208284031215610c3d57600080fd5b81356001600160e01b03198116811461089457600080fd5b600060208284031215610c6757600080fd5b815161089481610dd1565b60008060008060808587031215610c8857600080fd5b8435610c9381610dd1565b966020860135965060408601359560600135945092505050565b600060208284031215610cbf57600080fd5b5051919050565b60008060408385031215610cd957600080fd5b505080516020909101519092909150565b60008251610cfc818460208701610d8f565b9190910192915050565b6020815260008251806020840152610d25816040850160208701610d8f565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610d6257610d62610dbb565b604052919050565b600082821015610d8a57634e487b7160e01b600052601160045260246000fd5b500390565b60005b83811015610daa578181015183820152602001610d92565b8381111561064c5750506000910152565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610de657600080fd5b5056fea2646970667358221220516764d3eab4d02e4e74bc76d7d58137ff2228db160da96d43b3cc482411d45c64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063bc197c811161005b578063bc197c8114610111578063e0bab4c414610149578063e9d337b814610164578063f23a6e611461017757600080fd5b806301ffc9a7146100825780631a38a4fb146100aa5780631c4991ae146100e9575b600080fd5b610095610090366004610c2b565b610196565b60405190151581526020015b60405180910390f35b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100a1565b6100fc6100f7366004610c72565b6101cd565b604080519283526020830191909152016100a1565b61013061011f366004610af2565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016100a1565b6100d173ff795577d9ac8bd7d90ee22b6c1703490b6512fd81565b6000546100d1906001600160a01b031681565b610130610185366004610ba0565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b14806101c757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000806101f073ff795577d9ac8bd7d90ee22b6c1703490b6512fd3330876105e1565b6000866001600160a01b03166373ee45086040518163ffffffff1660e01b815260040160206040518083038186803b15801561022b57600080fd5b505afa15801561023f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102639190610c55565b90506000876001600160a01b031663ae7eaa046040518163ffffffff1660e01b815260040160206040518083038186803b1580156102a057600080fd5b505afa1580156102b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d89190610cad565b604051637921219560e11b8152336004820152306024820152604481018290526064810189905260a06084820152600060a48201529091506001600160a01b0383169063f242432a9060c401600060405180830381600087803b15801561033e57600080fd5b505af1158015610352573d6000803e3d6000fd5b505060008054610383935073ff795577d9ac8bd7d90ee22b6c1703490b6512fd92506001600160a01b031690610652565b6000546103af9073ff795577d9ac8bd7d90ee22b6c1703490b6512fd906001600160a01b031688610652565b6000805460405163e8eda9df60e01b815273ff795577d9ac8bd7d90ee22b6c1703490b6512fd60048201526024810189905230604482015260648101929092526001600160a01b03169063e8eda9df90608401600060405180830381600087803b15801561041c57600080fd5b505af1158015610430573d6000803e3d6000fd5b5061046b9250506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169050896000610652565b61049f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168988610652565b60405163a22cb46560e01b81526001600160a01b0389811660048301526001602483015283169063a22cb46590604401600060405180830381600087803b1580156104e957600080fd5b505af11580156104fd573d6000803e3d6000fd5b505060405163422f104360e01b8152600481018a905260248101899052604481018890526001600160a01b038b16925063422f104391506064016040805180830381600087803b15801561055057600080fd5b505af1158015610564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105889190610cc6565b909450925060006105998588610d6a565b905080156105d5576105d56001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383610780565b50505094509492505050565b6040516001600160a01b038085166024830152831660448201526064810182905261064c9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526107b0565b50505050565b8015806106db5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156106a157600080fd5b505afa1580156106b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d99190610cad565b155b61074b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084015b60405180910390fd5b6040516001600160a01b03831660248201526044810182905261077b90849063095ea7b360e01b90606401610615565b505050565b6040516001600160a01b03831660248201526044810182905261077b90849063a9059cbb60e01b90606401610615565b6000610805826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108829092919063ffffffff16565b80519091501561077b57808060200190518101906108239190610c09565b61077b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610742565b6060610891848460008561089b565b90505b9392505050565b6060824710156108fc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610742565b843b61094a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610742565b600080866001600160a01b031685876040516109669190610cea565b60006040518083038185875af1925050503d80600081146109a3576040519150601f19603f3d011682016040523d82523d6000602084013e6109a8565b606091505b50915091506109b88282866109c3565b979650505050505050565b606083156109d2575081610894565b8251156109e25782518084602001fd5b8160405162461bcd60e51b81526004016107429190610d06565b600082601f830112610a0d57600080fd5b8135602067ffffffffffffffff821115610a2957610a29610dbb565b8160051b610a38828201610d39565b838152828101908684018388018501891015610a5357600080fd5b600093505b85841015610a76578035835260019390930192918401918401610a58565b50979650505050505050565b600082601f830112610a9357600080fd5b813567ffffffffffffffff811115610aad57610aad610dbb565b610ac0601f8201601f1916602001610d39565b818152846020838601011115610ad557600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215610b0a57600080fd5b8535610b1581610dd1565b94506020860135610b2581610dd1565b9350604086013567ffffffffffffffff80821115610b4257600080fd5b610b4e89838a016109fc565b94506060880135915080821115610b6457600080fd5b610b7089838a016109fc565b93506080880135915080821115610b8657600080fd5b50610b9388828901610a82565b9150509295509295909350565b600080600080600060a08688031215610bb857600080fd5b8535610bc381610dd1565b94506020860135610bd381610dd1565b93506040860135925060608601359150608086013567ffffffffffffffff811115610bfd57600080fd5b610b9388828901610a82565b600060208284031215610c1b57600080fd5b8151801515811461089457600080fd5b600060208284031215610c3d57600080fd5b81356001600160e01b03198116811461089457600080fd5b600060208284031215610c6757600080fd5b815161089481610dd1565b60008060008060808587031215610c8857600080fd5b8435610c9381610dd1565b966020860135965060408601359560600135945092505050565b600060208284031215610cbf57600080fd5b5051919050565b60008060408385031215610cd957600080fd5b505080516020909101519092909150565b60008251610cfc818460208701610d8f565b9190910192915050565b6020815260008251806020840152610d25816040850160208701610d8f565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610d6257610d62610dbb565b604052919050565b600082821015610d8a57634e487b7160e01b600052601160045260246000fd5b500390565b60005b83811015610daa578181015183820152602001610d92565b8381111561064c5750506000910152565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610de657600080fd5b5056fea2646970667358221220516764d3eab4d02e4e74bc76d7d58137ff2228db160da96d43b3cc482411d45c64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2529,
        "contract": "contracts/AaveHelper.sol:AaveHelper",
        "label": "aaveLendingPool",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}