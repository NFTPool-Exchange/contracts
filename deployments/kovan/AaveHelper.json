{
  "address": "0xAbD31a8F11F3fBa11B8Bc364da9a73b922BB2d22",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aDAI",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DAI",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aDAI",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveLendingPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract INFTPool",
          "name": "nftPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ERC1155Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxERC20Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityWithDAI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ERC20Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpMinted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract INFTPool",
          "name": "nftPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ERC1155Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxERC20Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "buyERC1155WithDAI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ERC20Sold",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract INFTPool",
          "name": "nftPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ERC1155Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minERC20",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "sellERC1155ToDAI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ERC20Bought",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xba1fc056b6177e6a2d35a1d4e804297179d2bd11308e1c8718ba09a197a7e7b8",
  "receipt": {
    "to": null,
    "from": "0xA09aB1aBeCb91CaC38c3240912D2A1b31e22F147",
    "contractAddress": "0xAbD31a8F11F3fBa11B8Bc364da9a73b922BB2d22",
    "transactionIndex": 16,
    "gasUsed": "1393563",
    "logsBloom": "0x
    "blockHash": "0xcdfcc47e298737721d12850b4e995378a2f207b11cb2cecf66b150af52dcaa7f",
    "transactionHash": "0xba1fc056b6177e6a2d35a1d4e804297179d2bd11308e1c8718ba09a197a7e7b8",
    "logs": [],
    "blockNumber": 27005974,
    "cumulativeGasUsed": "2903186",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdCf0aF9e59C002FA3AA091a46196b37530FD48a8"
  ],
  "solcInputHash": "31009d06e7f8e61b96bae24e29564f45",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aDAI\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aDAI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveLendingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INFTPool\",\"name\":\"nftPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ERC1155Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxERC20Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityWithDAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ERC20Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INFTPool\",\"name\":\"nftPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ERC1155Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxERC20Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"buyERC1155WithDAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ERC20Sold\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INFTPool\",\"name\":\"nftPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ERC1155Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minERC20\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"sellERC1155ToDAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ERC20Bought\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AaveHelper.sol\":\"AaveHelper\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x249bc2a6d919da5f5145950664134cfcf2f66874bda801fd3b8fb861783da079\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0x7c0ea2d284bad1aa002165ba4c5eac30070be8e56b19dba1ac7c8f2c8bd4832c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2ccdc162657b677334eb08a60bb50a0dd74b22eff7150abb06487f58dbebd5e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfb1161632a10d0bd366c80db583246fa490183b45ec4f59acb43b97d1a7437b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/AaveHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\nimport {INFTPool} from \\\"./interfaces/INFTPool.sol\\\";\\r\\n\\r\\ninterface IAToken {\\r\\n    function POOL() external returns (address);\\r\\n\\r\\n    function UNDERLYING_ASSET_ADDRESS() external returns (address);\\r\\n}\\r\\n\\r\\ninterface IAaveLendingPool {\\r\\n    function deposit(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    function withdraw(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external returns (uint256);\\r\\n}\\r\\n\\r\\ncontract AaveHelper is ERC1155Holder {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // KOVAN\\r\\n    IERC20 public constant DAI =\\r\\n        IERC20(0xFf795577d9AC8bD7D90Ee22b6C1703490b6512FD);\\r\\n    address public aaveLendingPool;\\r\\n    IERC20 public immutable aDAI;\\r\\n\\r\\n    constructor(address _aDAI) {\\r\\n        aDAI = IERC20(_aDAI);\\r\\n        aaveLendingPool = IAToken(_aDAI).POOL();\\r\\n    }\\r\\n\\r\\n    function addLiquidityWithDAI(\\r\\n        INFTPool nftPool,\\r\\n        uint256 _ERC1155Amount,\\r\\n        uint256 _maxERC20Amount,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 ERC20Amount, uint256 lpMinted) {\\r\\n        if (nftPool.totalSupply() == 0) {\\r\\n            ERC20Amount = _maxERC20Amount;\\r\\n        } else {\\r\\n            ERC20Amount = nftPool.getAddLiquidityAmount(_ERC1155Amount);\\r\\n            require(\\r\\n                ERC20Amount <= _maxERC20Amount,\\r\\n                \\\"Helper: Insufficient ERC20 Amount\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // get required DAI amount from user\\r\\n        DAI.safeTransferFrom(msg.sender, address(this), ERC20Amount);\\r\\n        // get ERC1155 from user\\r\\n        IERC1155 erc1155Token = nftPool.ERC1155Token();\\r\\n        uint256 erc1155ID = nftPool.ERC1155ID();\\r\\n        erc1155Token.safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            erc1155ID,\\r\\n            _ERC1155Amount,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n\\r\\n        // convert DAI to aDAI\\r\\n        DAI.safeApprove(aaveLendingPool, 0);\\r\\n        DAI.safeApprove(aaveLendingPool, ERC20Amount);\\r\\n\\r\\n        IAaveLendingPool(aaveLendingPool).deposit(\\r\\n            address(DAI),\\r\\n            ERC20Amount,\\r\\n            address(this),\\r\\n            0\\r\\n        );\\r\\n\\r\\n        // addLiquidity to Pool\\r\\n        aDAI.safeApprove(address(nftPool), 0);\\r\\n        aDAI.safeApprove(address(nftPool), ERC20Amount);\\r\\n        erc1155Token.setApprovalForAll(address(nftPool), true);\\r\\n\\r\\n        (ERC20Amount, lpMinted) = nftPool.addLiquidity(\\r\\n            _ERC1155Amount,\\r\\n            ERC20Amount,\\r\\n            _deadline\\r\\n        );\\r\\n\\r\\n        // send LP tokens to user\\r\\n        nftPool.transfer(msg.sender, lpMinted);\\r\\n    }\\r\\n\\r\\n    function buyERC1155WithDAI(\\r\\n        INFTPool nftPool,\\r\\n        uint256 _ERC1155Amount,\\r\\n        uint256 _maxERC20Amount,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 ERC20Sold) {\\r\\n        // get aDAI amt required\\r\\n        ERC20Sold = nftPool.getPriceERC20toERC1155Exact(_ERC1155Amount);\\r\\n        require(\\r\\n            ERC20Sold <= _maxERC20Amount,\\r\\n            \\\"Helper: Insufficient ERC20 Amount\\\"\\r\\n        );\\r\\n\\r\\n        // get dai from user\\r\\n        DAI.transferFrom(msg.sender, address(this), ERC20Sold);\\r\\n\\r\\n        // convert DAI to aDAI\\r\\n        DAI.safeApprove(aaveLendingPool, 0);\\r\\n        DAI.safeApprove(aaveLendingPool, ERC20Sold);\\r\\n        IAaveLendingPool(aaveLendingPool).deposit(\\r\\n            address(DAI),\\r\\n            ERC20Sold,\\r\\n            address(this),\\r\\n            0\\r\\n        );\\r\\n\\r\\n        // swap aDAI -> ERC1155\\r\\n        aDAI.safeApprove(address(nftPool), 0);\\r\\n        aDAI.safeApprove(address(nftPool), ERC20Sold);\\r\\n        nftPool.swapERC20toERC1155Exact(\\r\\n            _maxERC20Amount,\\r\\n            _ERC1155Amount,\\r\\n            _deadline\\r\\n        );\\r\\n\\r\\n        // send ERC1155 to user\\r\\n        IERC1155 erc1155Token = nftPool.ERC1155Token();\\r\\n        uint256 erc1155ID = nftPool.ERC1155ID();\\r\\n        erc1155Token.safeTransferFrom(\\r\\n            address(this),\\r\\n            msg.sender,\\r\\n            erc1155ID,\\r\\n            _ERC1155Amount,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function sellERC1155ToDAI(\\r\\n        INFTPool nftPool,\\r\\n        uint256 _ERC1155Amount,\\r\\n        uint256 _minERC20,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 ERC20Bought) {\\r\\n        // get aDAI amt received\\r\\n        ERC20Bought = nftPool.getPriceERC1155toERC20(_ERC1155Amount);\\r\\n        require(ERC20Bought >= _minERC20, \\\"Helper: Insufficient ERC20 Amount\\\");\\r\\n\\r\\n        // get NFT from user\\r\\n        IERC1155 erc1155Token = nftPool.ERC1155Token();\\r\\n        uint256 erc1155ID = nftPool.ERC1155ID();\\r\\n        erc1155Token.safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            erc1155ID,\\r\\n            _ERC1155Amount,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n\\r\\n        // swap ERC1155 -> aDAI\\r\\n        erc1155Token.setApprovalForAll(address(nftPool), true);\\r\\n        nftPool.swapExactERC1155ToERC20(_ERC1155Amount, _minERC20, _deadline);\\r\\n\\r\\n        // convert aDAI to DAI and send to user\\r\\n        IAaveLendingPool(aaveLendingPool).withdraw(\\r\\n            address(DAI),\\r\\n            ERC20Bought,\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x28f678d568f694826bcca0dcc1d78c1180a76a9df833f462a1a9e206e34fc637\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/INFTPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\n\\r\\ninterface INFTPool is IERC20 {\\r\\n    function ERC20Token() external view returns (IERC20);\\r\\n\\r\\n    function ERC1155Token() external view returns (IERC1155);\\r\\n\\r\\n    function ERC1155ID() external view returns (uint256);\\r\\n\\r\\n    function FEE_MULTIPLIER() external view returns (uint256);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\r\\n\\r\\n    function nonces(address) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function addLiquidity(\\r\\n        uint256 _ERC1155Amount,\\r\\n        uint256 _maxERC20Amount,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 ERC20Amount, uint256 lpMinted);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        uint256 _lpAmount,\\r\\n        uint256 _minERC1155,\\r\\n        uint256 _minERC20,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 ERC1155Amount, uint256 ERC20Amount);\\r\\n\\r\\n    function swapExactERC1155ToERC20(\\r\\n        uint256 _ERC1155Amount,\\r\\n        uint256 _minERC20,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 ERC20Bought);\\r\\n\\r\\n    function swapERC20toERC1155Exact(\\r\\n        uint256 _maxERC20,\\r\\n        uint256 _ERC1155Amount,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 ERC20Sold);\\r\\n\\r\\n    function getAddLiquidityAmount(uint256 _ERC1155Amount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 ERC20Amount);\\r\\n\\r\\n    function getRemoveLiquidityAmounts(uint256 _lpAmount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 ERC1155Amount, uint256 ERC20Amount);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 ERC1155Reserve, uint256 ERC20Reserve);\\r\\n\\r\\n    /// fee deducted in ERC20\\r\\n    function getPriceERC1155toERC20(uint256 _ERC1155Amount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 ERC20Bought);\\r\\n\\r\\n    /// fee deducted in ERC20\\r\\n    function getPriceERC20toERC1155Exact(uint256 _ERC1155Amount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 ERC20Required);\\r\\n\\r\\n    /// fee deducted in OutputToken\\r\\n    function calculateOutputAmount_OutputFee(\\r\\n        uint256 inputAmount,\\r\\n        uint256 inputReserve,\\r\\n        uint256 outputReserve\\r\\n    ) external pure returns (uint256);\\r\\n\\r\\n    /// fee deducted in InputToken\\r\\n    function calculateInputAmount_InputFee(\\r\\n        uint256 outputAmount,\\r\\n        uint256 inputReserve,\\r\\n        uint256 outputReserve\\r\\n    ) external pure returns (uint256 price);\\r\\n}\\r\\n\",\"keccak256\":\"0xe88d02a6b5948c78f7240badeed995da4ed0be585828bba629d3b9336f38ae42\",\"license\":\"GPL-2.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620018fe380380620018fe8339810160408190526200003491620000ef565b806001600160a01b03166080816001600160a01b031660601b81525050806001600160a01b0316637535d2466040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200008d57600080fd5b505af1158015620000a2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c89190620000ef565b600080546001600160a01b0319166001600160a01b03929092169190911790555062000121565b6000602082840312156200010257600080fd5b81516001600160a01b03811681146200011a57600080fd5b9392505050565b60805160601c6117a36200015b6000396000818160c501528181610594015281816105cb0152818161098601526109bd01526117a36000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063bc197c8111610066578063bc197c8114610148578063e0bab4c414610180578063e9d337b81461019b578063f23a6e61146101ae578063fc924f21146101cd57600080fd5b806301ffc9a7146100985780631a38a4fb146100c05780631c4991ae146100ff57806324244f2014610127575b600080fd5b6100ab6100a636600461155b565b6101e0565b60405190151581526020015b60405180910390f35b6100e77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100b7565b61011261010d3660046115a2565b610217565b604080519283526020830191909152016100b7565b61013a6101353660046115a2565b61076c565b6040519081526020016100b7565b610167610156366004611422565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016100b7565b6100e773ff795577d9ac8bd7d90ee22b6c1703490b6512fd81565b6000546100e7906001600160a01b031681565b6101676101bc3660046114d0565b63f23a6e6160e01b95945050505050565b61013a6101db3660046115a2565b610bc6565b60006001600160e01b03198216630271189760e51b148061021157506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561025357600080fd5b505afa158015610267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028b91906115dd565b6102975783915061033a565b6040516349dcc43f60e11b8152600481018690526001600160a01b038716906393b9887e9060240160206040518083038186803b1580156102d757600080fd5b505afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f91906115dd565b91508382111561033a5760405162461bcd60e51b8152600401610331906116a1565b60405180910390fd5b61035a73ff795577d9ac8bd7d90ee22b6c1703490b6512fd333085610f46565b6000866001600160a01b03166373ee45086040518163ffffffff1660e01b815260040160206040518083038186803b15801561039557600080fd5b505afa1580156103a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cd9190611585565b90506000876001600160a01b031663ae7eaa046040518163ffffffff1660e01b815260040160206040518083038186803b15801561040a57600080fd5b505afa15801561041e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044291906115dd565b604051637921219560e11b81529091506001600160a01b0383169063f242432a90610477903390309086908d90600401611636565b600060405180830381600087803b15801561049157600080fd5b505af11580156104a5573d6000803e3d6000fd5b5050600080546104d6935073ff795577d9ac8bd7d90ee22b6c1703490b6512fd92506001600160a01b031690610fb7565b6000546105029073ff795577d9ac8bd7d90ee22b6c1703490b6512fd906001600160a01b031686610fb7565b6000805460405163e8eda9df60e01b815273ff795577d9ac8bd7d90ee22b6c1703490b6512fd60048201526024810187905230604482015260648101929092526001600160a01b03169063e8eda9df90608401600060405180830381600087803b15801561056f57600080fd5b505af1158015610583573d6000803e3d6000fd5b506105be9250506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169050896000610fb7565b6105f26001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168986610fb7565b60405163a22cb46560e01b81526001600160a01b0389811660048301526001602483015283169063a22cb46590604401600060405180830381600087803b15801561063c57600080fd5b505af1158015610650573d6000803e3d6000fd5b505060405163422f104360e01b8152600481018a905260248101879052604481018890526001600160a01b038b16925063422f104391506064016040805180830381600087803b1580156106a357600080fd5b505af11580156106b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106db91906115f6565b60405163a9059cbb60e01b81523360048201526024810182905291955093506001600160a01b0389169063a9059cbb90604401602060405180830381600087803b15801561072857600080fd5b505af115801561073c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107609190611539565b50505094509492505050565b60405163b91686dd60e01b8152600481018490526000906001600160a01b0386169063b91686dd9060240160206040518083038186803b1580156107af57600080fd5b505afa1580156107c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e791906115dd565b9050828111156108095760405162461bcd60e51b8152600401610331906116a1565b6040516323b872dd60e01b81523360048201523060248201526044810182905273ff795577d9ac8bd7d90ee22b6c1703490b6512fd906323b872dd90606401602060405180830381600087803b15801561086257600080fd5b505af1158015610876573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089a9190611539565b50600080546108c89173ff795577d9ac8bd7d90ee22b6c1703490b6512fd916001600160a01b031690610fb7565b6000546108f49073ff795577d9ac8bd7d90ee22b6c1703490b6512fd906001600160a01b031683610fb7565b6000805460405163e8eda9df60e01b815273ff795577d9ac8bd7d90ee22b6c1703490b6512fd60048201526024810184905230604482015260648101929092526001600160a01b03169063e8eda9df90608401600060405180830381600087803b15801561096157600080fd5b505af1158015610975573d6000803e3d6000fd5b506109b09250506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169050866000610fb7565b6109e46001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168683610fb7565b604051634a370ba560e01b81526004810184905260248101859052604481018390526001600160a01b03861690634a370ba590606401602060405180830381600087803b158015610a3457600080fd5b505af1158015610a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6c91906115dd565b506000856001600160a01b03166373ee45086040518163ffffffff1660e01b815260040160206040518083038186803b158015610aa857600080fd5b505afa158015610abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae09190611585565b90506000866001600160a01b031663ae7eaa046040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1d57600080fd5b505afa158015610b31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5591906115dd565b604051637921219560e11b81529091506001600160a01b0383169063f242432a90610b8a903090339086908c90600401611636565b600060405180830381600087803b158015610ba457600080fd5b505af1158015610bb8573d6000803e3d6000fd5b505050505050949350505050565b604051636cd44b6560e01b8152600481018490526000906001600160a01b03861690636cd44b659060240160206040518083038186803b158015610c0957600080fd5b505afa158015610c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4191906115dd565b905082811015610c635760405162461bcd60e51b8152600401610331906116a1565b6000856001600160a01b03166373ee45086040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9e57600080fd5b505afa158015610cb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd69190611585565b90506000866001600160a01b031663ae7eaa046040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1357600080fd5b505afa158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b91906115dd565b604051637921219560e11b81529091506001600160a01b0383169063f242432a90610d80903390309086908c90600401611636565b600060405180830381600087803b158015610d9a57600080fd5b505af1158015610dae573d6000803e3d6000fd5b505060405163a22cb46560e01b81526001600160a01b038a81166004830152600160248301528516925063a22cb4659150604401600060405180830381600087803b158015610dfc57600080fd5b505af1158015610e10573d6000803e3d6000fd5b5050604051630c74e63360e01b81526004810189905260248101889052604481018790526001600160a01b038a169250630c74e6339150606401602060405180830381600087803b158015610e6457600080fd5b505af1158015610e78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9c91906115dd565b50600054604051631a4ca37b60e21b815273ff795577d9ac8bd7d90ee22b6c1703490b6512fd6004820152602481018590523360448201526001600160a01b03909116906369328dec90606401602060405180830381600087803b158015610f0357600080fd5b505af1158015610f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3b91906115dd565b505050949350505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610fb19085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526110e0565b50505050565b8015806110405750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561100657600080fd5b505afa15801561101a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103e91906115dd565b155b6110ab5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610331565b6040516001600160a01b0383166024820152604481018290526110db90849063095ea7b360e01b90606401610f7a565b505050565b6000611135826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111b29092919063ffffffff16565b8051909150156110db57808060200190518101906111539190611539565b6110db5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610331565b60606111c184846000856111cb565b90505b9392505050565b60608247101561122c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610331565b843b61127a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610331565b600080866001600160a01b03168587604051611296919061161a565b60006040518083038185875af1925050503d80600081146112d3576040519150601f19603f3d011682016040523d82523d6000602084013e6112d8565b606091505b50915091506112e88282866112f3565b979650505050505050565b606083156113025750816111c4565b8251156113125782518084602001fd5b8160405162461bcd60e51b8152600401610331919061166e565b600082601f83011261133d57600080fd5b8135602067ffffffffffffffff8211156113595761135961173f565b8160051b6113688282016116e2565b83815282810190868401838801850189101561138357600080fd5b600093505b858410156113a6578035835260019390930192918401918401611388565b50979650505050505050565b600082601f8301126113c357600080fd5b813567ffffffffffffffff8111156113dd576113dd61173f565b6113f0601f8201601f19166020016116e2565b81815284602083860101111561140557600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561143a57600080fd5b853561144581611755565b9450602086013561145581611755565b9350604086013567ffffffffffffffff8082111561147257600080fd5b61147e89838a0161132c565b9450606088013591508082111561149457600080fd5b6114a089838a0161132c565b935060808801359150808211156114b657600080fd5b506114c3888289016113b2565b9150509295509295909350565b600080600080600060a086880312156114e857600080fd5b85356114f381611755565b9450602086013561150381611755565b93506040860135925060608601359150608086013567ffffffffffffffff81111561152d57600080fd5b6114c3888289016113b2565b60006020828403121561154b57600080fd5b815180151581146111c457600080fd5b60006020828403121561156d57600080fd5b81356001600160e01b0319811681146111c457600080fd5b60006020828403121561159757600080fd5b81516111c481611755565b600080600080608085870312156115b857600080fd5b84356115c381611755565b966020860135965060408601359560600135945092505050565b6000602082840312156115ef57600080fd5b5051919050565b6000806040838503121561160957600080fd5b505080516020909101519092909150565b6000825161162c818460208701611713565b9190910192915050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b602081526000825180602084015261168d816040850160208701611713565b601f01601f19169190910160400192915050565b60208082526021908201527f48656c7065723a20496e73756666696369656e7420455243323020416d6f756e6040820152601d60fa1b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561170b5761170b61173f565b604052919050565b60005b8381101561172e578181015183820152602001611716565b83811115610fb15750506000910152565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461176a57600080fd5b5056fea2646970667358221220a0fe56214ad77bf2b84cc86e46b96628851c512b2351f00cd983b160f297139364736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063bc197c8111610066578063bc197c8114610148578063e0bab4c414610180578063e9d337b81461019b578063f23a6e61146101ae578063fc924f21146101cd57600080fd5b806301ffc9a7146100985780631a38a4fb146100c05780631c4991ae146100ff57806324244f2014610127575b600080fd5b6100ab6100a636600461155b565b6101e0565b60405190151581526020015b60405180910390f35b6100e77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100b7565b61011261010d3660046115a2565b610217565b604080519283526020830191909152016100b7565b61013a6101353660046115a2565b61076c565b6040519081526020016100b7565b610167610156366004611422565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016100b7565b6100e773ff795577d9ac8bd7d90ee22b6c1703490b6512fd81565b6000546100e7906001600160a01b031681565b6101676101bc3660046114d0565b63f23a6e6160e01b95945050505050565b61013a6101db3660046115a2565b610bc6565b60006001600160e01b03198216630271189760e51b148061021157506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561025357600080fd5b505afa158015610267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028b91906115dd565b6102975783915061033a565b6040516349dcc43f60e11b8152600481018690526001600160a01b038716906393b9887e9060240160206040518083038186803b1580156102d757600080fd5b505afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f91906115dd565b91508382111561033a5760405162461bcd60e51b8152600401610331906116a1565b60405180910390fd5b61035a73ff795577d9ac8bd7d90ee22b6c1703490b6512fd333085610f46565b6000866001600160a01b03166373ee45086040518163ffffffff1660e01b815260040160206040518083038186803b15801561039557600080fd5b505afa1580156103a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cd9190611585565b90506000876001600160a01b031663ae7eaa046040518163ffffffff1660e01b815260040160206040518083038186803b15801561040a57600080fd5b505afa15801561041e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044291906115dd565b604051637921219560e11b81529091506001600160a01b0383169063f242432a90610477903390309086908d90600401611636565b600060405180830381600087803b15801561049157600080fd5b505af11580156104a5573d6000803e3d6000fd5b5050600080546104d6935073ff795577d9ac8bd7d90ee22b6c1703490b6512fd92506001600160a01b031690610fb7565b6000546105029073ff795577d9ac8bd7d90ee22b6c1703490b6512fd906001600160a01b031686610fb7565b6000805460405163e8eda9df60e01b815273ff795577d9ac8bd7d90ee22b6c1703490b6512fd60048201526024810187905230604482015260648101929092526001600160a01b03169063e8eda9df90608401600060405180830381600087803b15801561056f57600080fd5b505af1158015610583573d6000803e3d6000fd5b506105be9250506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169050896000610fb7565b6105f26001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168986610fb7565b60405163a22cb46560e01b81526001600160a01b0389811660048301526001602483015283169063a22cb46590604401600060405180830381600087803b15801561063c57600080fd5b505af1158015610650573d6000803e3d6000fd5b505060405163422f104360e01b8152600481018a905260248101879052604481018890526001600160a01b038b16925063422f104391506064016040805180830381600087803b1580156106a357600080fd5b505af11580156106b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106db91906115f6565b60405163a9059cbb60e01b81523360048201526024810182905291955093506001600160a01b0389169063a9059cbb90604401602060405180830381600087803b15801561072857600080fd5b505af115801561073c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107609190611539565b50505094509492505050565b60405163b91686dd60e01b8152600481018490526000906001600160a01b0386169063b91686dd9060240160206040518083038186803b1580156107af57600080fd5b505afa1580156107c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e791906115dd565b9050828111156108095760405162461bcd60e51b8152600401610331906116a1565b6040516323b872dd60e01b81523360048201523060248201526044810182905273ff795577d9ac8bd7d90ee22b6c1703490b6512fd906323b872dd90606401602060405180830381600087803b15801561086257600080fd5b505af1158015610876573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089a9190611539565b50600080546108c89173ff795577d9ac8bd7d90ee22b6c1703490b6512fd916001600160a01b031690610fb7565b6000546108f49073ff795577d9ac8bd7d90ee22b6c1703490b6512fd906001600160a01b031683610fb7565b6000805460405163e8eda9df60e01b815273ff795577d9ac8bd7d90ee22b6c1703490b6512fd60048201526024810184905230604482015260648101929092526001600160a01b03169063e8eda9df90608401600060405180830381600087803b15801561096157600080fd5b505af1158015610975573d6000803e3d6000fd5b506109b09250506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169050866000610fb7565b6109e46001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168683610fb7565b604051634a370ba560e01b81526004810184905260248101859052604481018390526001600160a01b03861690634a370ba590606401602060405180830381600087803b158015610a3457600080fd5b505af1158015610a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6c91906115dd565b506000856001600160a01b03166373ee45086040518163ffffffff1660e01b815260040160206040518083038186803b158015610aa857600080fd5b505afa158015610abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae09190611585565b90506000866001600160a01b031663ae7eaa046040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1d57600080fd5b505afa158015610b31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5591906115dd565b604051637921219560e11b81529091506001600160a01b0383169063f242432a90610b8a903090339086908c90600401611636565b600060405180830381600087803b158015610ba457600080fd5b505af1158015610bb8573d6000803e3d6000fd5b505050505050949350505050565b604051636cd44b6560e01b8152600481018490526000906001600160a01b03861690636cd44b659060240160206040518083038186803b158015610c0957600080fd5b505afa158015610c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4191906115dd565b905082811015610c635760405162461bcd60e51b8152600401610331906116a1565b6000856001600160a01b03166373ee45086040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9e57600080fd5b505afa158015610cb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd69190611585565b90506000866001600160a01b031663ae7eaa046040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1357600080fd5b505afa158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b91906115dd565b604051637921219560e11b81529091506001600160a01b0383169063f242432a90610d80903390309086908c90600401611636565b600060405180830381600087803b158015610d9a57600080fd5b505af1158015610dae573d6000803e3d6000fd5b505060405163a22cb46560e01b81526001600160a01b038a81166004830152600160248301528516925063a22cb4659150604401600060405180830381600087803b158015610dfc57600080fd5b505af1158015610e10573d6000803e3d6000fd5b5050604051630c74e63360e01b81526004810189905260248101889052604481018790526001600160a01b038a169250630c74e6339150606401602060405180830381600087803b158015610e6457600080fd5b505af1158015610e78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9c91906115dd565b50600054604051631a4ca37b60e21b815273ff795577d9ac8bd7d90ee22b6c1703490b6512fd6004820152602481018590523360448201526001600160a01b03909116906369328dec90606401602060405180830381600087803b158015610f0357600080fd5b505af1158015610f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3b91906115dd565b505050949350505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610fb19085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526110e0565b50505050565b8015806110405750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561100657600080fd5b505afa15801561101a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103e91906115dd565b155b6110ab5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610331565b6040516001600160a01b0383166024820152604481018290526110db90849063095ea7b360e01b90606401610f7a565b505050565b6000611135826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111b29092919063ffffffff16565b8051909150156110db57808060200190518101906111539190611539565b6110db5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610331565b60606111c184846000856111cb565b90505b9392505050565b60608247101561122c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610331565b843b61127a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610331565b600080866001600160a01b03168587604051611296919061161a565b60006040518083038185875af1925050503d80600081146112d3576040519150601f19603f3d011682016040523d82523d6000602084013e6112d8565b606091505b50915091506112e88282866112f3565b979650505050505050565b606083156113025750816111c4565b8251156113125782518084602001fd5b8160405162461bcd60e51b8152600401610331919061166e565b600082601f83011261133d57600080fd5b8135602067ffffffffffffffff8211156113595761135961173f565b8160051b6113688282016116e2565b83815282810190868401838801850189101561138357600080fd5b600093505b858410156113a6578035835260019390930192918401918401611388565b50979650505050505050565b600082601f8301126113c357600080fd5b813567ffffffffffffffff8111156113dd576113dd61173f565b6113f0601f8201601f19166020016116e2565b81815284602083860101111561140557600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561143a57600080fd5b853561144581611755565b9450602086013561145581611755565b9350604086013567ffffffffffffffff8082111561147257600080fd5b61147e89838a0161132c565b9450606088013591508082111561149457600080fd5b6114a089838a0161132c565b935060808801359150808211156114b657600080fd5b506114c3888289016113b2565b9150509295509295909350565b600080600080600060a086880312156114e857600080fd5b85356114f381611755565b9450602086013561150381611755565b93506040860135925060608601359150608086013567ffffffffffffffff81111561152d57600080fd5b6114c3888289016113b2565b60006020828403121561154b57600080fd5b815180151581146111c457600080fd5b60006020828403121561156d57600080fd5b81356001600160e01b0319811681146111c457600080fd5b60006020828403121561159757600080fd5b81516111c481611755565b600080600080608085870312156115b857600080fd5b84356115c381611755565b966020860135965060408601359560600135945092505050565b6000602082840312156115ef57600080fd5b5051919050565b6000806040838503121561160957600080fd5b505080516020909101519092909150565b6000825161162c818460208701611713565b9190910192915050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b602081526000825180602084015261168d816040850160208701611713565b601f01601f19169190910160400192915050565b60208082526021908201527f48656c7065723a20496e73756666696369656e7420455243323020416d6f756e6040820152601d60fa1b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561170b5761170b61173f565b604052919050565b60005b8381101561172e578181015183820152602001611716565b83811115610fb15750506000910152565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461176a57600080fd5b5056fea2646970667358221220a0fe56214ad77bf2b84cc86e46b96628851c512b2351f00cd983b160f297139364736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2540,
        "contract": "contracts/AaveHelper.sol:AaveHelper",
        "label": "aaveLendingPool",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}